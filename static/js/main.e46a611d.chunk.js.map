{"version":3,"sources":["components/timer/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","time","auto","step","onTimeEnd","onTick","onTimePause","initialTime","useState","count","setCount","isActive","setIsActive","useEffect","myInterval","setInterval","clearInterval","className","style","width","onClick","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wQAqCeA,G,MAjCD,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,KAAMC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAC5CC,EAAcN,EADgD,EAExCO,mBAASP,GAF+B,mBAE5DQ,EAF4D,KAErDC,EAFqD,OAGlCF,mBAASN,GAHyB,mBAG5DS,EAH4D,KAGlDC,EAHkD,KAyBpE,OAlBAC,qBAAU,WACN,GAAGF,GAAYT,EAAK,CACbO,EAAM,IACLL,IACAM,EAASH,IAEb,IAAMO,EAAaC,aAAY,WAC3BL,EAASD,EAAQ,GACjBJ,EAAOI,KAED,IAAPN,GACH,OAAO,WACHa,cAAcF,IAGtBR,MACD,CAACK,EAAUF,EAAOP,IAGjB,yBAAKe,UAAU,OACX,4BAAKR,GACL,uBAAGS,MAAO,CAACC,MAAM,GAAD,OAAa,GAARV,EAAL,OAAsBQ,UAAU,SAFpD,IAGKf,GAAQ,4BAAQkB,QAxBA,kBAAMR,GAAaD,KAwBUA,EAAqB,QAAV,YCCtDU,MA7Bf,WACE,IAAMjB,EAAY,kBAAMkB,QAAQC,IAAI,gBAC9BlB,EAAS,SAACJ,GAAD,OAAUqB,QAAQC,IAAR,0BAA+BtB,KAClDK,EAAc,kBAAMgB,QAAQC,IAAI,qBAEtC,OACE,yBAAKN,UAAU,OACb,2CACA,kBAAC,EAAD,CACEhB,KAAM,GACNC,MAAM,EACNC,KAAM,EACNC,UAAWA,EACXC,OAAQA,EACRC,YAAaA,IAGf,kBAAC,EAAD,CACEL,KAAM,GACNC,MAAM,EACNC,KAAM,EACNC,UAAWA,EACXC,OAAQA,EACRC,YAAaA,MChBDkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.e46a611d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport './styles.css'\n\nconst Timer = ({ time, auto, step, onTimeEnd, onTick, onTimePause }) => {\n    const initialTime = time;\n    const [ count, setCount ] = useState(time)\n    const [ isActive, setIsActive ] = useState(auto);\n\n    const changeActiveness = () => setIsActive(!isActive) \n\n    useEffect(() => {\n        if(isActive || auto){\n            if(count<0){\n                onTimeEnd()\n                setCount(initialTime)\n            }\n            const myInterval = setInterval(() => {\n                setCount(count - 1)\n                onTick(count)\n                \n            }, step * 1000)\n            return () => {\n                clearInterval(myInterval)\n            }\n        }\n        onTimePause()\n    }, [isActive, count, auto])\n    \n    return(\n        <div className='box'>\n            <h2>{count}</h2>\n            <p style={{width: `${count * 10}px`}} className='line'></p> {/*<---for homework purpose only*/}\n            {auto || <button onClick={changeActiveness}>{!isActive ? 'start' : 'pause'}</button> }\n        </div>\n    )\n}\nexport default Timer;","import React from 'react';\nimport './App.css';\n\nimport Timer from './components/timer/Timer';\n\nfunction App() {\n  const onTimeEnd = () => console.log('Time is up!');\n  const onTick = (time) => console.log(`Time remaining: ${time}`);\n  const onTimePause = () => console.log('Timer is paused!');\n\n  return (\n    <div className=\"App\">\n      <h1>Dummy Timer</h1>\n      <Timer \n        time={20} \n        auto={true} \n        step={1} //1s\n        onTimeEnd={onTimeEnd}\n        onTick={onTick}\n        onTimePause={onTimePause}\n      />\n\n      <Timer \n        time={50} \n        auto={false} \n        step={5}\n        onTimeEnd={onTimeEnd}\n        onTick={onTick}\n        onTimePause={onTimePause}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}